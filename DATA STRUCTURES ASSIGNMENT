def precedence(operator):
    if operator == '+' or operator == '-':
        return 1
    elif operator == '*' or operator == '/' or operator == '%':
        return 2
    else:
        return 0

def infix_to_rpn(expression):
    output = []
    stack = []

    for token in expression:
        if token.isdigit():
            output.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()  # Discard the '('
        else:
            while stack and precedence(stack[-1]) >= precedence(token):
                output.append(stack.pop())
            stack.append(token)

    while stack:
        output.append(stack.pop())

    return output

def main():
    expression = input("Enter the expression: ").split()
    rpn_expression = infix_to_rpn(expression)
    print("Reversed Polish Notation:", ' '.join(rpn_expression))

if __name__ == "__main__":
    main()
